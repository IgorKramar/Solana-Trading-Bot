use teloxide::utils::command::BotCommands;
use serde::{Deserialize, Serialize};

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase")]
pub enum Command {
    #[command(description = "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏")]
    Positions,
    #[command(description = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")]
    SetStrategy { name: String, params: String },
    #[command(description = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")]
    Stop,
    #[command(description = "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")]
    Start,
    #[command(description = "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")]
    Stats,
    #[command(description = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è")]
    SetAlert { pair: String, price: f64 },
    #[command(description = "–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã")]
    Balances,
    #[command(description = "–ü–æ–º–æ—â—å")]
    Help,
}

#[derive(Serialize, Deserialize)]
pub struct AlertConfig {
    pub pair: String,
    pub price: f64,
    pub direction: AlertDirection,
    pub user_id: i64,
}

#[derive(Serialize, Deserialize)]
pub enum AlertDirection {
    Above,
    Below,
}

impl Command {
    pub async fn handle(&self, ctx: CommandContext) -> Result<(), Box<dyn std::error::Error>> {
        match self {
            Command::Positions => {
                let positions = ctx.trading_strategy.get_positions().await?;
                let message = format_positions(positions);
                ctx.reply(message).await?;
            }
            Command::SetStrategy { name, params } => {
                ctx.trading_strategy.update_config(name, params).await?;
                ctx.reply("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞").await?;
            }
            Command::Stop => {
                ctx.trading_strategy.stop().await?;
                ctx.reply("–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞").await?;
            }
            Command::Start => {
                ctx.trading_strategy.start().await?;
                ctx.reply("–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞").await?;
            }
            Command::Stats => {
                let stats = ctx.monitor.get_stats().await?;
                let message = format_stats(stats);
                ctx.reply(message).await?;
            }
            Command::SetAlert { pair, price } => {
                ctx.alerts.add_alert(AlertConfig {
                    pair: pair.clone(),
                    price: *price,
                    direction: AlertDirection::Above,
                    user_id: ctx.user_id,
                }).await?;
                ctx.reply("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ").await?;
            }
            Command::Balances => {
                let balances = ctx.trading_strategy.get_balances().await?;
                let message = format_balances(balances);
                ctx.reply(message).await?;
            }
            Command::Help => {
                ctx.reply(Command::descriptions()).await?;
            }
        }
        Ok(())
    }
}

fn format_positions(positions: Vec<Position>) -> String {
    let mut message = String::from("üìä –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n\n");
    for pos in positions {
        message.push_str(&format!(
            "üî∏ {}: {} @ ${:.2} (PnL: ${:.2})\n",
            pos.pair, pos.size, pos.entry_price, pos.unrealized_pnl
        ));
    }
    message
}

fn format_stats(stats: Statistics) -> String {
    format!(
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏:\n\n\
        –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {}\n\
        –£—Å–ø–µ—à–Ω—ã—Ö: {}%\n\
        –û–±—â–∏–π P&L: ${:.2}\n\
        –°—Ä–µ–¥–Ω–∏–π P&L –Ω–∞ —Å–¥–µ–ª–∫—É: ${:.2}\n\
        –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {}h",
        stats.total_trades,
        stats.win_rate,
        stats.total_pnl,
        stats.avg_trade_pnl,
        stats.uptime_hours
    )
} 